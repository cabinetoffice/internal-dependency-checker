{
    "version": 1,
    "description": "IDC - Java Audit Pipeline",
    "processors": [
        {
            "grok": {
                "field": "log.file.path",
                "patterns": [
                    "repos__%{DATA:idc_audit.org}__%{GREEDYDATA:idc_audit.repo_path}__%{DATA:idc_audit.tech}__%{DATA:idc_audit.timestamp}.json"
                ]
            }
        },
        {
            "date": {
                "field": "idc_audit.timestamp",
                "formats": [
                    "yyyy-MM-dd_HH-mm-ss"
                ]
            }
        },
        {
            "remove": {
                "field": [
                    "idc_audit.timestamp"
                ],
                "ignore_missing": true,
                "ignore_failure": true
            }
        },
        {
            "split": {
                "field": "idc_audit.repo_path",
                "separator": "__"
            }
        },
        {
            "set": {
                "field": "idc_audit.repo",
                "value": "{{ idc_audit.repo_path.0 }}",
                "override": false
            }
        },
        {
            "join": {
                "field": "idc_audit.repo_path",
                "separator": "/"
            }
        },
        {
            "set": {
                "field": "idc_audit.totalDependencies",
                "value": "{{ message.dependencies.length }}",
                "ignore_empty_value": true,
                "if": "ctx.message?.dependencies != null"
            }
        },
        {
            "script": {
                "lang": "painless",
                "source": "ArrayList vulnerabilities = new ArrayList();\nif( ctx.message?.dependencies != null ){\n  for(dep in ctx.message.dependencies) {\n    if( dep?.vulnerabilityIds != null ){\n      Map dependency = new HashMap();\n      dependency.put(\"fileName\", dep.fileName.splitOnToken(': ')[1]);\n      dependency.put(\"description\", dep.description);\n      dependency.put(\"vulnerabilities\", new HashMap());\n      for (vuln in dep.vulnerabilityIds) {\n        dependency.vulnerabilities.put(\"id\", vuln.id);\n        dependency.vulnerabilities.put(\"confidence\", vuln.confidence);\n        dependency.vulnerabilities.put(\"url\", (vuln.url != null) ? vuln.url : \"\");\n      }\n      if( dep?.vulnerabilities != null ){\n        dependency.vulnerabilities.put(\"details\", new HashMap());\n        for (vulns in dep.vulnerabilities) {\n          dependency.vulnerabilities.details.put(\"source\", vulns.source);\n          dependency.vulnerabilities.details.put(\"name\", vulns.name);\n          dependency.vulnerabilities.details.put(\"severity\", vulns.severity);\n          dependency.vulnerabilities.details.put(\"cwes\", vulns.cwes);\n        }\n      }\n      vulnerabilities.add(dependency);\n    }\n  }\n  ctx.idc_audit.put(\"vulnerabilities\", vulnerabilities);\n}"
            }
        },
        {
            "remove": {
                "field": [
                    "agent",
                    "ecs",
                    "event",
                    "host",
                    "input",
                    "log",
                    "message"
                ],
                "ignore_missing": true
            }
        }
    ],
    "on_failure": [
        {
            "set": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}",
                "ignore_empty_value": true
            }
        }
    ]
}