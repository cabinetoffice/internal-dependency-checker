{
    "version": 1,
    "description": "IDC - GIT Commits Pipeline",
    "processors": [
        {
            "grok": {
                "field": "log.file.path",
                "patterns": [
                    "repos__%{DATA:idc_audit.org}__%{DATA:idc_audit.repo}__%{DATA:idc_audit.tech}__%{DATA:idc_audit.timestamp}.json"
                ]
            }
        },
        {
            "rename": {
                "field": "message.error",
                "target_field": "idc_audit.error",
                "ignore_missing": true
            }
        },
        {
            "script": {
                "lang": "painless",
                "source": "if( ctx.message[ctx.idc_audit.repo].size() == 1 && ctx.message[ctx.idc_audit.repo][0]?.error != null){\n  ctx.idc_audit.put(\"error__detail\", ctx.message[ctx.idc_audit.repo][0].error);\n} else {\n  ctx.idc_audit.put(\"message\", ctx.message[ctx.idc_audit.repo]);\n}",
                "if": "ctx.message[ctx.idc_audit.repo] != null",
                "ignore_failure": true
            }
        },
        {
            "rename": {
                "field": "idc_audit.error__detail",
                "target_field": "idc_audit.error.detail",
                "ignore_missing": true
            }
        },
        {
            "foreach": {
                "field": "idc_audit.message",
                "processor": {
                    "append": {
                        "field": "idc_audit.commits",
                        "value": [
                            "{{ _ingest._value.commit }}"
                        ],
                        "allow_duplicates": false
                    }
                },
                "if": "ctx?.idc_audit?.message != null"
            }
        },
        {
            "foreach": {
                "field": "idc_audit.message",
                "processor": {
                    "append": {
                        "field": "idc_audit.emails",
                        "value": [
                            "{{ _ingest._value.email }}"
                        ],
                        "allow_duplicates": false
                    }
                },
                "if": "ctx?.idc_audit?.message != null"
            }
        },
        {
            "foreach": {
                "field": "idc_audit.message",
                "processor": {
                    "append": {
                        "field": "idc_audit.timestamps",
                        "value": [
                            "{{ _ingest._value.timestamp }}"
                        ],
                        "allow_duplicates": false
                    }
                },
                "if": "ctx?.idc_audit?.message != null"
            }
        },
        {
            "script": {
                "lang": "painless",
                "source": "int max = 0;\nfor (t in ctx.idc_audit.timestamps) {\n  max = (int)Math.max(max, Integer.parseInt(t));\n}\nctx.idc_audit.put(\"last_commit\", \"\" + max);",
                "if": "ctx.idc_audit != null && ctx.idc_audit.timestamps != null",
                "ignore_failure": true
            }
        },
        {
            "script": {
                "lang": "painless",
                "source": "ctx.idc_audit.put(\"link\", \"https://github.com/\" + ctx.idc_audit.org + \"/\" + ctx.idc_audit.repo);",
                "ignore_failure": true
            }
        },
        {
            "date": {
                "field": "idc_audit.last_commit",
                "formats": [
                    "UNIX"
                ],
                "if": "ctx.idc_audit != null && ctx.idc_audit.last_commit != null"
            }
        },
        {
            "remove": {
                "field": [
                    "agent",
                    "ecs",
                    "event",
                    "host",
                    "input",
                    "log",
                    "message",
                    "idc_audit.message",
                    "idc_audit.timestamp"
                ],
                "ignore_missing": true
            }
        }
    ],
    "on_failure": [
        {
            "set": {
                "field": "error.message",
                "value": "{{ _ingest.on_failure_message }}",
                "ignore_empty_value": true
            }
        }
    ]
}